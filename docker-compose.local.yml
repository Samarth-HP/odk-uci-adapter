version: '3.7'

services:
  db:
    image: postgres:12
    environment:
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
    networks:
      - my-network
    ports:
      - ${POSTGRES_PORT}:5432
    volumes:
      - pgdata:/var/lib/postgresql/data

  gql:
    image: hasura/graphql-engine:v2.7.0
    ports:
      - ${HASURA_PORT}:8080
    env_file:
      - .env
    environment:
      HASURA_GRAPHQL_DATABASE_URL: postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
      HASURA_GRAPHQL_ENABLE_CONSOLE: "true"
      HASURA_GRAPHQL_ADMIN_SECRET: ${HASURA_ADMIN_SECRET}
      WEBHOOK_URL: http://web:${PORT}/submit
    networks:
      - my-network
    depends_on:
      - db
    restart: always

  redis:
    image: redis:alpine
    ports:
      - 127.0.0.1:${QUEUE_PORT}:6379
    command: ["redis-server", "--appendonly", "yes", "--replica-read-only", "no"]
    networks:
      - my-network
    volumes:
      - ./redis-data:/data
      - ./redis.conf:/usr/local/etc/redis/redis.conf
    restart: on-failure

  redis-ui:
    # container_name: redis-ui
    image: redislabs/redisinsight:latest
    restart: always
    networks:
      - my-network
    volumes:
      - redisinsight:/db 
    ports:
      - 8088:8001

  cdac:
    image: samagragovernance/cdac-service:latest
    restart: always
    networks:
      - my-network
    environment:
      USERNAME: "${USERNAME}"
      SENDER_ID: "${SENDER_ID}"
      PASSWORD: "${PASSWORD}"
      SECURE_KEY: "${SECURE_KEY}"
    ports:
      - "${CDAC_PORT}:8080"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://cdac:8080/api"]
      interval: 2s
      timeout: 5s
      retries: 20

  web:
    build:
      dockerfile: Dockerfile.local
      context: .
    networks:
      - my-network
    env_file:
      - .env
    depends_on:
      - redis
      - gql
      - db
    ports:
      - '${PORT}:3000'
    restart: always
    volumes:
    - ./src:/app/src  # using local volume

volumes:
  pgdata:
  redisinsight:
    driver: local 
networks:
  my-network:
    driver: bridge
